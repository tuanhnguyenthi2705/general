#!/bin/bash
set -euo pipefail
trap 'echo "[ERROR] Failed at line $LINENO"; exit 1' ERR

# ========================= Detect USER_HOME safely =========================
LOGNAME=$(logname 2>/dev/null || true)
[ -z "${LOGNAME:-}" ] && LOGNAME="${SUDO_USER:-root}"
if [ "$LOGNAME" = "root" ]; then
  USER_HOME="/root"
else
  USER_HOME="/home/$LOGNAME"
fi

# ========================= Data dir =========================
mkdir -p "$USER_HOME/gensyn/run"

# ===================== SERVICE: rl-swarm =====================
cat << 'EOF' > /etc/systemd/system/rl-swarm.service
[Unit]
Description=RL Swarm Service
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
WorkingDirectory=/root/rl-swarm
# Đổi ./run_first.sh thành script phù hợp nếu bạn muốn
ExecStart=/bin/bash -lc 'source /root/rl-swarm/.venv/bin/activate && ./run_first.sh'
Restart=always
RestartSec=5
User=root
Environment=PYTHONUNBUFFERED=1
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
EOF

# ===================== SERVICE: rl-swarm2 =====================
# Dùng %h và %u để tránh hardcode đường dẫn khi chạy dưới root
cat << EOF > /etc/systemd/system/rl-swarm2.service
[Unit]
Description=Auto Run Gensyn Script (folder cycler)
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
User=root
WorkingDirectory=%h
ExecStart=%h/gensyn/run/auto.run
Restart=always
RestartSec=10
Environment=LOGNAME=%u
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
EOF

# ===================== SCRIPT: auto.run =====================
# Lưu ý: dùng here-doc quoted 'AUTORUN_EOF' để giữ nguyên nội dung literal
cat << 'AUTORUN_EOF' > /root/gensyn/run/auto.run
#!/bin/bash
set -euo pipefail

# --------- Config paths ----------
BASE_DIR="/root/gensyn/run"          # source: /root/gensyn/run/<idx>/
TARGET_DIR="/root/rl-swarm"          # rl-swarm repo
LOGIN_SUBDIR="modal-login"
BOOTNODES_FILE="$BASE_DIR/bootnodes.txt"
CONFIG_FILE="$TARGET_DIR/rgym_exp/config/rg-swarm.yaml"

log() { printf "%s - %s\n" "$(date '+%F %T')" "$*"; }

# --------- Detect max numeric folder 1..N ----------
MAX_FOLDER="$(find "$BASE_DIR" -maxdepth 1 -type d -regex '.*/[0-9]+' -printf '%f\n' | sort -n | tail -1 || true)"
MAX_FOLDER="${MAX_FOLDER:-1}"
log "Phát hiện $MAX_FOLDER folder, sẽ lặp 1..$MAX_FOLDER"

# --------- Ensure jq exists (for JSON parsing) ----------
if ! command -v jq >/dev/null 2>&1; then
  apt-get update -y >/dev/null 2>&1 || true
  apt-get install -y jq >/dev/null 2>&1 || true
fi

# --------- Update bootnode inside YAML ----------
update_bootnode() {
  if [ ! -s "$BOOTNODES_FILE" ]; then
    log "CẢNH BÁO: $BOOTNODES_FILE không tồn tại/đang rỗng; giữ bootnode cũ"
    return 0
  fi

  local pick
  pick="$(grep -v '^[[:space:]]*$' "$BOOTNODES_FILE" | shuf -n 1 || true)"
  if [ -z "${pick:-}" ]; then
    log "CẢNH BÁO: Không lấy được bootnode; giữ bootnode cũ"
    return 0
  fi

  # Backup rotation (keep latest 5)
  cp -f "$CONFIG_FILE" "$CONFIG_FILE.backup.$(date +%Y%m%d%H%M%S)" || true
  ls -1t "$CONFIG_FILE".backup.* 2>/dev/null | tail -n +6 | xargs -r rm -f

  # Replace only the first "- '/ip4..." entry under initial_peers:
  awk -v BN="$pick" '
    BEGIN { replaced=0; in_peers=0 }
    /^[[:space:]]*initial_peers:[[:space:]]*$/ { in_peers=1; print; next }
    in_peers==1 && /^[[:space:]]*-[[:space:]]*'\''\/ip4/ && replaced==0 {
      sub(/-.*/, "- \x27" BN "\x27"); replaced=1; print; next
    }
    in_peers==1 && !/^[[:space:]]*-/ { in_peers=0; print; next }
    { print }
  ' "$CONFIG_FILE" > "_
