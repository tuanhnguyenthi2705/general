#!/bin/bash
set -euo pipefail

# ===== Xác định USER_HOME đúng =====
LOGNAME=$(logname 2>/dev/null || true)
[ -z "${LOGNAME:-}" ] && LOGNAME="${SUDO_USER:-root}"
if [ "$LOGNAME" = "root" ]; then
  USER_HOME="/root"
else
  USER_HOME="/home/$LOGNAME"
fi

# ===== Thư mục dữ liệu =====
mkdir -p "$USER_HOME/gensyn/run"

# ===================== SERVICE: rl-swarm =====================
cat << 'EOF' > /etc/systemd/system/rl-swarm.service
[Unit]
Description=RL Swarm Service
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
WorkingDirectory=/root/rl-swarm
ExecStart=/bin/bash -lc 'source /root/rl-swarm/.venv/bin/activate && ./run_rl_swarm.sh'
Restart=always
RestartSec=5
User=root
Environment=PYTHONUNBUFFERED=1
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
EOF

# ===================== SERVICE: rl-swarm2 =====================
cat << EOF > /etc/systemd/system/rl-swarm2.service
[Unit]
Description=Auto Run Gensyn Script (folder cycler)
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
User=root
WorkingDirectory=%h
ExecStart=%h/gensyn/run/auto.run
Restart=always
RestartSec=10
Environment=LOGNAME=%u
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
EOF

# ===================== SCRIPT: auto.run =====================
cat << 'AUTORUN_EOF' > "$USER_HOME/gensyn/run/auto.run"
#!/bin/bash
set -euo pipefail

BASE_DIR="/root/gensyn/run"          # nguồn dữ liệu: /root/gensyn/run/<idx>/
TARGET_DIR="/root/rl-swarm"          # repo rl-swarm
LOGIN_SUBDIR="modal-login"
BOOTNODES_FILE="$BASE_DIR/bootnodes.txt"
CONFIG_FILE="$TARGET_DIR/rgym_exp/config/rg-swarm.yaml"

# Tìm số folder lớn nhất (tên là số 1..N)
MAX_FOLDER=$(find "$BASE_DIR" -maxdepth 1 -type d -regex '.*/[0-9]+' -printf '%f\n' | sort -n | tail -1)
MAX_FOLDER=${MAX_FOLDER:-1}
echo "$(date) - Phát hiện $MAX_FOLDER folder, sẽ lặp 1..$MAX_FOLDER"

# Đảm bảo jq có sẵn (để đọc JSON an toàn)
if ! command -v jq >/dev/null 2>&1; then
  apt-get update -y >/dev/null 2>&1 || true
  apt-get install -y jq >/dev/null 2>&1 || true
fi

update_bootnode() {
  if [ ! -s "$BOOTNODES_FILE" ]; then
    echo "$(date) - CẢNH BÁO: $BOOTNODES_FILE không tồn tại/đang rỗng; giữ bootnode cũ"
    return 0
  fi

  local pick
  pick=$(grep -v '^[[:space:]]*$' "$BOOTNODES_FILE" | shuf -n 1 || true)
  if [ -z "$pick" ]; then
    echo "$(date) - CẢNH BÁO: Không lấy được bootnode; giữ bootnode cũ"
    return 0
  fi

  # Backup quay vòng 5 bản
  cp -f "$CONFIG_FILE" "$CONFIG_FILE.backup.$(date +%Y%m%d%H%M%S)" || true
  ls -1t "$CONFIG_FILE".backup.* 2>/dev/null | tail -n +6 | xargs -r rm -f

  # Chỉ thay 1 dòng đầu của danh sách peers (giữ format YAML)
  awk -v BN="$pick" '
    BEGIN{replaced=0}
    {print_line=1}
    /^([[:space:]]*)initial_peers:[[:space:]]*$/ {in_peers=1}
    in_peers && /^[[:space:]]*-[[:space:]]*'\''\/ip4/ && !replaced {
      sub(/-.*/, "- \x27" BN "\x27")
      replaced=1
    }
    {print}
  ' "$CONFIG_FILE" > "$CONFIG_FILE.tmp" && mv "$CONFIG_FILE.tmp" "$CONFIG_FILE"

  RANDOM_BOOTNODE="$pick"
  export RANDOM_BOOTNODE
}

copy_and_restart() {
  local idx="$1"
  local PEM_SOURCE="$BASE_DIR/$idx/swarm.pem"
  local TEMP_SOURCE="$BASE_DIR/$idx/temp-data"

  if [ ! -f "$PEM_SOURCE" ]; then
    echo "$(date) - LỖI: Không thấy $PEM_SOURCE"
    return 1
  fi
  if [ ! -d "$TEMP_SOURCE" ]; then
    echo "$(date) - LỖI: Không thấy $TEMP_SOURCE"
    return 1
  fi

  systemctl stop rl-swarm || true

  # Đợi rl-swarm thực sự dừng (tối đa 30s)
  local count=0
  while systemctl is-active --quiet rl-swarm && [ $count -lt 30 ]; do
    sleep 1; ((count++))
  done

  # Đóng server Node nếu còn
  pkill -f "yarn start" 2>/dev/null || true
  pkill -f "node.*modal-login" 2>/dev/null || true
  sleep 2

  # Copy pem & temp-data
  rm -f "$TARGET_DIR/swarm.pem"
  cp -f "$PEM_SOURCE" "$TARGET_DIR/"
  rm -rf "$TARGET_DIR/$LOGIN_SUBDIR/temp-data"
  mkdir -p "$TARGET_DIR/$LOGIN_SUBDIR"
  cp -r "$TEMP_SOURCE" "$TARGET_DIR/$LOGIN_SUBDIR/"

  # Cập nhật bootnode ngẫu nhiên
  update_bootnode

  systemctl start rl-swarm

  # Đợi userData.json xuất hiện (timeout 60s)
  local timeout=60
  local elapsed=0
  while [ ! -f "$TARGET_DIR/$LOGIN_SUBDIR/temp-data/userData.json" ] && [ $elapsed -lt $timeout ]; do
    sleep 5; ((elapsed+=5))
  done
  if [ ! -f "$TARGET_DIR/$LOGIN_SUBDIR/temp-data/userData.json" ]; then
    echo "$(date) - CẢNH BÁO: userData.json không xuất hiện sau $timeout giây"
    return 1
  fi

  # Lấy ORG_ID an toàn bằng jq
  local ORG_ID
  ORG_ID=$(jq -r '.orgId // empty' "$TARGET_DIR/$LOGIN_SUBDIR/temp-data/userData.json")
  if [ -z "$ORG_ID" ] || [ "$ORG_ID" = "null" ]; then
    echo "$(date) - LỖI: Không tìm thấy orgId trong userData.json"
    return 1
  fi

  # Chờ API key kích hoạt (timeout 5 phút)
  local api_timeout=300
  local api_elapsed=0
  while [ $api_elapsed -lt $api_timeout ]; do
    STATUS=$(curl -s "http://localhost:3000/api/get-api-key-status?orgId=$ORG_ID" || echo "error")
    if [[ "$STATUS" == "activated" ]]; then
      break
    fi
    sleep 5; ((api_elapsed+=5))
  done
  if [ $api_el_]()
