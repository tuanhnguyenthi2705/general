#!/bin/bash
set -euo pipefail

RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m'; NC='\033[0m'
print_info(){ echo -e "${GREEN}[INFO]${NC} $1"; }
print_error(){ echo -e "${RED}[ERROR]${NC} $1"; }
print_warning(){ echo -e "${YELLOW}[WARNING]${NC} $1"; }

OVPN_SOURCE_DIR="/home/$(logname)/ovpn"
OVPN_DEST_PATH="/home/$(logname)/.ovpn.ovpn"
TOKEN_FILE="/home/$(logname)/gensyn/huggingface.token"
BLOCKASSIST_DIR="/root/blockassist"
DEST_DIR="/root/blockassist/modal-login"
LOG_FILE="$BLOCKASSIST_DIR/LOG.log"
OVPN_PIDFILE="/run/ovpn-client.pid"
OVPN_LOG="/var/log/ovpn-client.log"

command -v expect >/dev/null 2>&1 || { apt-get update && apt-get install -y expect; }

# Lấy danh sách token đã lọc, và truy cập theo chỉ số trên danh sách đã lọc
mapfile -t TOKENS_ARR < <(grep -vE '^\s*#|^\s*$' "$TOKEN_FILE" || true)
NUM_LINES=${#TOKENS_ARR[@]}
if (( NUM_LINES == 0 )); then print_error "Không có token hợp lệ trong $TOKEN_FILE"; exit 1; fi

print_warning "Nhap so thu tu bat dau (1-$NUM_LINES) [Mac dinh: 1 sau 5 giay]:"
START_INDEX=""
if read -t 5 START_INDEX; then
  if [[ ! "$START_INDEX" =~ ^[0-9]+$ ]] || (( START_INDEX < 1 || START_INDEX > NUM_LINES )); then
    print_warning "So khong hop le. Bat dau tu 1"; START_INDEX=1
  else
    print_info "Bat dau tu so: $START_INDEX"
  fi
else
  print_warning "\nKhong co input. Bat dau tu 1"; START_INDEX=1
fi

# --- QUẢN LÝ OVPN KHÔNG ĐỤNG systemd ---
start_ovpn_with_config() {
  local cfg="$1"
  # Kill phiên cũ (nếu có)
  if [[ -f "$OVPN_PIDFILE" ]] && kill -0 "$(cat "$OVPN_PIDFILE")" 2>/dev/null; then
    kill "$(cat "$OVPN_PIDFILE")" || true
    sleep 1
  fi
  # Chạy mới dạng daemon, ghi pidfile và log
  nohup openvpn --config "$cfg" \
        --daemon \
        --writepid "$OVPN_PIDFILE" \
        --auth-nocache \
        --log "$OVPN_LOG" >/dev/null 2>&1
  # Chờ lên link
  sleep 5
}

setup_vpn() {
  local i=$1
  local OVPN_FOLDER="$OVPN_SOURCE_DIR/$i"

  if [[ ! -d "$OVPN_FOLDER" ]]; then
    print_error "Thu muc VPN khong ton tai: $OVPN_FOLDER"; return 1
  fi

  local OVPN_SOURCE_FILE
  OVPN_SOURCE_FILE=$(find "$OVPN_FOLDER" -maxdepth 1 -type f -name "*.ovpn" | head -n 1 || true)
  if [[ -z "${OVPN_SOURCE_FILE:-}" ]]; then
    print_error "Khong tim thay file .ovpn trong: $OVPN_FOLDER"; return 1
  fi

  print_info "Su dung file VPN: $OVPN_SOURCE_FILE"
  cp -f "$OVPN_SOURCE_FILE" "$OVPN_DEST_PATH"

  # KHÔNG systemctl restart ovpn
  start_ovpn_with_config "$OVPN_DEST_PATH"

  # Lấy IP ra biến toàn cục để các hàm khác dùng
  CURRENT_IP="$(curl -4 --max-time 6 ifconfig.me 2>/dev/null || echo "unknown")"
  print_info "VPN sẵn sàng (folder $i). IP: $CURRENT_IP"
}

copy_training_data() {
  local i=$1
  local SOURCE_DIR="/home/$(logname)/gensyn/$i/temp-data"
  if [[ ! -d "$SOURCE_DIR" ]]; then
    print_error "Thu muc nguon khong ton tai: $SOURCE_DIR"; return 1
  fi
  rm -rf "$DEST_DIR/temp-data"
  mkdir -p "$DEST_DIR"
  cp -r "$SOURCE_DIR" "$DEST_DIR/"         # Giữ nguyên thư mục con temp-data
}

run_training() {
  local i=$1
  cd "$BLOCKASSIST_DIR"

  if [[ ${#TOKENS_ARR[@]} -lt i ]]; then
    print_error "Khong co token cho chi muc $i"; return 1
  fi
  local TOKEN="${TOKENS_ARR[$((i-1))]}"

  if [[ -z "$TOKEN" ]]; then
    print_error "Token rong cho chi muc $i"; return 1
  fi

  local EXPECT_SCRIPT
  EXPECT_SCRIPT=$(mktemp)
  cat > "$EXPECT_SCRIPT" << 'EOF'
#!/usr/bin/expect -f
set timeout -1
# TOKEN được truyền qua env để tránh lộ trực tiếp trong file
set token $env(HF_TOKEN)
spawn python run.py
expect {
  -re "(?i)token"     { send "$token\r"; exp_continue }
  -re "(?i)huggingface" { send "$token\r"; exp_continue }
  eof
}
EOF
  chmod +x "$EXPECT_SCRIPT"

  print_info "Bat dau chay training..."
  HF_TOKEN="$TOKEN" \
  { echo "$(date)"; echo "Source: $i | IP: ${CURRENT_IP:-unknown}";
    "$EXPECT_SCRIPT" 2>&1
    echo "=== Training completed at $(date) ==="; } | tee -a "$LOG_FILE"

  rm -f "$EXPECT_SCRIPT"
  print_info "Training hoan thanh cho i = $i"
}

process_range() {
  local start=$1 end=$2
  for i in $(seq "$start" "$end"); do
    print_info "Xu ly folder $i"

    if ! setup_vpn "$i"; then
      print_error "Loi thiet lap VPN cho i = $i. Bo qua..."; continue
    fi
    if ! copy_training_data "$i"; then
      print_error "Loi copy data cho i = $i. Bo qua..."; continue
    fi
    if ! run_training "$i"; then
      print_error "Loi training cho i = $i. Tiep tuc..."; continue
    fi

    SLEEP_TIME=$((RANDOM % 21 + 20))
    echo "Sleep $SLEEP_TIME seconds" | tee -a "$LOG_FILE"
    sleep "$SLEEP_TIME"
  done
}

echo "Auto training session started at $(date) | Starting from index: $START_INDEX" | tee -a "$LOG_FILE"

if (( START_INDEX <= NUM_LINES )); then
  print_info "=== Chay tu $START_INDEX den $NUM_LINES ==="
  process_range "$START_INDEX" "$NUM_LINES"
fi
if (( START_INDEX > 1 )); then
  print_info "=== Quay lai chay tu 1 den $((START_INDEX - 1)) ==="
  process_range 1 "$((START_INDEX - 1))"
fi

print_info "Hoan thanh tat ca! Xem logs: tail -f $LOG_FILE"
