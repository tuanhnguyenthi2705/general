#!/usr/bin/env bash
# blockassist-auto.run â€” run blockassist across OpenVPN profiles in folders 1..150 (no zero padding)
# Usage:
#   ./blockassist-auto.run --single 12
#   ./blockassist-auto.run --range 1 150
#   OVPN_BASE=/home/xtr01/ovpn RUN_CMD="poetry run python app.py" ./blockassist-auto.run --range 1 150

set -Eeuo pipefail

# -------- Config (override via env) --------
OVPN_BASE="${OVPN_BASE:-/root/ovpn}"             # contains folders 1,2,3,...,150
RUN_DIR="${RUN_DIR:-$PWD}"                        # where blockassist runs
RUN_CMD="${RUN_CMD:-poetry run python app.py}"    # command to run one upload/inference
OPENVPN_BIN="${OPENVPN_BIN:-/usr/sbin/openvpn}"   # openvpn path
OPENVPN_WAIT_SEC="${OPENVPN_WAIT_SEC:-8}"         # wait after (re)connect
LOG_DIR="${LOG_DIR:-/var/log}"
# -------------------------------------------

log()   { printf "\033[0;32m[INFO]\033[0m %s\n" "$*"; }
warn()  { printf "\033[1;33m[WARN]\033[0m %s\n" "$*"; }
err()   { printf "\033[0;31m[ERR ]\033[0m %s\n" "$*"; }

need_bin() {
  command -v "$1" >/dev/null 2>&1 || { err "Missing binary: $1"; exit 1; }
}

need_bin "$OPENVPN_BIN"
need_bin awk
need_bin grep
need_bin pkill
need_bin sleep

stop_openvpn() {
  if pgrep -x openvpn >/dev/null 2>&1; then
    warn "Stopping existing openvpn..."
    pkill -x openvpn || true
    sleep 1
  fi
}

start_openvpn() {
  local cfg="$1"
  local tag="$2"
  local logf="${LOG_DIR%/}/openvpn-$tag.log"

  stop_openvpn
  log "Starting openvpn with: $cfg"
  "$OPENVPN_BIN" --config "$cfg" --daemon --log "$logf" || {
    err "Failed to start openvpn with $cfg"
    return 1
  }
  sleep "$OPENVPN_WAIT_SEC"
}

pick_ovpn_file() {
  # $1 = folder index (no zero padding)
  local idx="$1"
  local dir="$OVPN_BASE/$idx"
  if [[ ! -d "$dir" ]]; then
    err "Folder not found: $dir"
    return 1
  fi
  local file
  file="$(find "$dir" -maxdepth 1 -type f -name "*.ovpn" | head -n1 || true)"
  if [[ -z "$file" ]]; then
    err "No .ovpn file in: $dir"
    return 1
  fi
  printf "%s" "$file"
}

run_once_with_index() {
  local idx="$1"
  local ovpn_file
  ovpn_file="$(pick_ovpn_file "$idx")" || return 1

  start_openvpn "$ovpn_file" "$idx" || return 1

  log "Running blockassist command in $RUN_DIR"
  ( cd "$RUN_DIR" && eval "$RUN_CMD" )
}

usage() {
  cat <<EOF
Usage:
  $0 --single <N>
  $0 --range <START> <END>

Env overrides:
  OVPN_BASE=/home/xtr01/ovpn RUN_DIR=/root/blockassist RUN_CMD="poetry run python app.py" $0 --range 1 150
EOF
}

if [[ $# -lt 2 ]]; then
  usage; exit 1
fi

case "$1" in
  --single)
    idx="${2:-}"
    [[ "$idx" =~ ^[0-9]+$ ]] || { err "Index must be a number"; exit 1; }
    run_once_with_index "$idx" || { err "Failed at index $idx"; exit 1; }
    ;;
  --range)
    start="${2:-}"; end="${3:-}"
    [[ "$start" =~ ^[0-9]+$ && "$end" =~ ^[0-9]+$ && "$start" -le "$end" ]] || { err "Range invalid"; exit 1; }
    for i in $(seq "$start" "$end"); do
      log "=== INDEX $i ==="
      if ! run_once_with_index "$i"; then
        warn "Index $i failed, continuing..."
      fi
    done
    ;;
  *)
    usage; exit 1;;
esac
