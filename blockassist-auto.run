#!/bin/bash
set -euo pipefail

# ==========================================
#  AUTO-RUN SCRIPT CHO BLOCKASSIST (ĐÃ CHỈNH CHUẨN CHO HỆ VPN MỚI)
#  Sử dụng 1 file cấu hình cố định: /home/xtr01/ovpn/active.ovpn
#  Mỗi lần chạy, script chỉ việc copy file .ovpn cần dùng vào file này,
#  rồi restart service systemd `ovpn.service`
# ==========================================

# ========== MÀU SẮC ==========
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

print_info()    { echo -e "${GREEN}[INFO]${NC} $1"; }
print_error()   { echo -e "${RED}[ERROR]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }

# ========== CẤU HÌNH CỐ ĐỊNH ==========
# Folder chứa các file VPN theo số thứ tự (1..150)
OVPN_SOURCE_DIR="/home/xtr01/ovpn"

# File .ovpn cố định mà service `ovpn.service` sẽ luôn đọc
OVPN_ACTIVE_FILE="/home/xtr01/ovpn/active.ovpn"

# File chứa danh sách token Hugging Face
TOKEN_FILE="/home/xtr01/gensyn/huggingface.token"

# Thư mục chính của BlockAssist
BLOCKASSIST_DIR="/root/blockassist"
DEST_DIR="$BLOCKASSIST_DIR/modal-login"

# File log ghi quá trình train
LOG_FILE="$BLOCKASSIST_DIR/LOG.log"

# ========== KIỂM TRA CÁC THÀNH PHẦN CẦN THIẾT ==========
if ! command -v expect &> /dev/null; then
    apt-get update && apt-get install -y expect
fi

if [ ! -f "$TOKEN_FILE" ]; then
    print_error "Không tìm thấy file token: $TOKEN_FILE"
    exit 1
fi

TOKENS=$(grep -vE '^\s*#|^\s*$' "$TOKEN_FILE")
NUM_LINES=$(echo "$TOKENS" | wc -l)

print_warning "Nhập số thứ tự bắt đầu (1-$NUM_LINES) [Mặc định: 1 sau 5 giây]:"
START_INDEX=""
if read -t 5 START_INDEX; then
    if [[ ! "$START_INDEX" =~ ^[0-9]+$ ]] || [ "$START_INDEX" -lt 1 ] || [ "$START_INDEX" -gt "$NUM_LINES" ]; then
        print_warning "Giá trị không hợp lệ, bắt đầu từ 1"
        START_INDEX=1
    else
        print_info "Bắt đầu từ số: $START_INDEX"
    fi
else
    print_warning "\nKhông nhập, mặc định bắt đầu từ 1"
    START_INDEX=1
fi

# ========== HÀM SETUP VPN ==========
setup_vpn() {
    local i=$1
    local FOLDER_NAME
    FOLDER_NAME=$(printf "%02d" "$i")
    local OVPN_FOLDER="$OVPN_SOURCE_DIR/$FOLDER_NAME"

    if [ ! -d "$OVPN_FOLDER" ]; then
        print_error "Thư mục VPN không tồn tại: $OVPN_FOLDER"
        return 1
    fi

    local OVPN_SOURCE_FILE
    OVPN_SOURCE_FILE=$(find "$OVPN_FOLDER" -maxdepth 1 -type f -name "*.ovpn" | head -n 1)

    if [ -z "$OVPN_SOURCE_FILE" ]; then
        print_error "Không tìm thấy file .ovpn trong: $OVPN_FOLDER"
        return 1
    fi

    print_info "Đang sử dụng file VPN: $OVPN_SOURCE_FILE"
    install -m 600 "$OVPN_SOURCE_FILE" "$OVPN_ACTIVE_FILE"
    systemctl restart ovpn
    sleep 5
    ip=$(curl -4 -s ifconfig.me || echo "Không thể lấy IP")
    print_info "VPN đã thiết lập thành công cho folder $FOLDER_NAME → IP hiện tại: $ip"
}

# ========== HÀM COPY DỮ LIỆU TRAIN ==========
copy_training_data() {
    local i=$1
    local FOLDER_NAME
    FOLDER_NAME=$(printf "%02d" "$i")
    local SOURCE_DIR="/home/xtr01/gensyn/$FOLDER_NAME/temp-data"

    if [ ! -d "$SOURCE_DIR" ]; then
        print_error "Thư mục dữ liệu nguồn không tồn tại: $SOURCE_DIR"
        return 1
    fi

    rm -rf "$DEST_DIR/temp-data"
    cp -r "$SOURCE_DIR"/ "$DEST_DIR/"
}

# ========== HÀM CHẠY TRAINING ==========
run_training() {
    local i=$1
    local FOLDER_NAME
    FOLDER_NAME=$(printf "%02d" "$i")
    cd "$BLOCKASSIST_DIR"

    local TOKEN
    TOKEN=$(sed -n "${i}p" "$TOKEN_FILE")

    if [ -z "$TOKEN" ]; then
        print_error "Không thể lấy token ở dòng $i trong $TOKEN_FILE"
        return 1
    fi

    EXPECT_SCRIPT=$(mktemp)
    cat > "$EXPECT_SCRIPT" << EOF
#!/usr/bin/expect -f
set timeout -1
spawn python run.py
expect {
    "*token*" { send "$TOKEN\r"; exp_continue }
    "*Token*" { send "$TOKEN\r"; exp_continue }
    "*huggingface*" { send "$TOKEN\r"; exp_continue }
    "*HuggingFace*" { send "$TOKEN\r"; exp_continue }
    eof
}
EOF
    chmod +x "$EXPECT_SCRIPT"

    print_info "Bắt đầu training (i=$i, folder=$FOLDER_NAME)..."
    {
        echo "$(date)"
        echo "Source: $FOLDER_NAME | IP: $ip"
        "$EXPECT_SCRIPT" 2>&1
        echo "=== Training completed at $(date) ==="
    } | tee -a "$LOG_FILE"

    rm -f "$EXPECT_SCRIPT"
    print_info "Training hoàn tất cho i = $i"
}

# ========== HÀM CHẠY TRONG KHOẢNG ==========
process_range() {
    local start=$1
    local end=$2

    for i in $(seq "$start" "$end"); do
        FOLDER_NAME=$(printf "%02d" "$i")
        print_info "=== Xử lý folder $FOLDER_NAME (i = $i) ==="

        if ! setup_vpn "$i"; then
            print_error "Lỗi thiết lập VPN cho i=$i, bỏ qua..."
            continue
        fi

        if ! copy_training_data "$i"; then
            print_error "Lỗi copy dữ liệu cho i=$i, bỏ qua..."
            continue
        fi

        if ! run_training "$i"; then
            print_error "Lỗi training cho i=$i, bỏ qua..."
            continue
        fi

        SLEEP_TIME=$((RANDOM % 21 + 20))
        echo "Ngủ $SLEEP_TIME giây..." | tee -a "$LOG_FILE"
        sleep $SLEEP_TIME
    done
}

# ========== LUỒNG CHÍNH ==========
echo "Auto training session started at $(date) | Start index: $START_INDEX" | tee -a "$LOG_FILE"

if [ "$START_INDEX" -le "$NUM_LINES" ]; then
    print_info "=== Chạy từ $START_INDEX đến $NUM_LINES ==="
    process_range "$START_INDEX" "$NUM_LINES"
fi

if [ "$START_INDEX" -gt 1 ]; then
    print_info "=== Quay lại chạy từ 1 đến $((START_INDEX - 1)) ==="
    process_range 1 "$((START_INDEX - 1))"
fi

print_info "HOÀN THÀNH TOÀN BỘ! Xem log: tail -f $LOG_FILE"
